{"ast":null,"code":"var _jsxFileName = \"/Users/nsujela/Desktop/connectRN/shift-tracker/src/ShiftsTable.js\";\nimport { Paper, TableContainer, Table, TableHead, TableBody, TableRow, TableCell } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ShiftsTable = _ref => {\n  let {\n    shiftsData,\n    nursesData\n  } = _ref;\n  const FIELDS = [\"name\", \"start\", \"end\", \"qual_required\", \"nurse_id\"];\n  const COL_HEADERS = [\"Shift\", \"Start time\", \"End time\", \"Certification required\", \"Assigned nurse\"];\n  const TIME_FIELDS = [\"start\", \"end\"];\n  const produceDisplayText = (shift, field) => {\n    // Process datetime (i.e. start & end)\n    if (TIME_FIELDS.includes(field)) {\n      return parseDateTimeUtils(shift[field]);\n    }\n\n    // Process nurse ID\n    else if (field === 'nurse_id') {\n      const nurseId = shift[field];\n      if (!nurseId) {\n        return '';\n      }\n      const nurse = nursesData.find(nur => nur.id === nurseId);\n      const nurseString = nurse.first_name + \" \" + nurse.last_name + \", \" + nurse.qualification;\n      return nurseString;\n    }\n\n    // All other fields\n    return shift[field];\n  };\n  const parseDateTime = iso => {\n    const removeFrontZero = str => {\n      if (str.length === 2 && str[0] === '0') {\n        return str[1];\n      }\n    };\n\n    // Break up date and time 2021-08-01T09:00:00Z\n    const date_time_split = iso.split(\"T\");\n    var [date, time] = [date_time_split[0], date_time_split[1]];\n\n    // Convert YYYY-MM-DD -> MM/DD/YY\n    const date_split = date.split(\"-\");\n    var [year, month, day] = [date_split[0], date_split[1], date_split[2]];\n    const dateString = removeFrontZero(month) + '/' + removeFrontZero(day) + '/' + year;\n\n    // Convert time 13:00:00Z -> 1:00:00 AM\n    const time_split = time.slice(0, -1).split(':');\n    const [hour, min, sec] = [time_split[0], time_split[1], time_split[2]];\n    const period = hour < 12 ? 'AM' : 'PM';\n    var newHour = parseInt(hour) > 12 ? parseInt(hour) - 12 : parseInt(hour) === 0 ? 12 : parseInt(hour);\n    newHour = newHour.toString();\n    const timeString = [newHour, min, sec].join(\":\") + \" \" + period;\n    const dateTimeDisplay = dateString + \" \" + timeString;\n    return dateTimeDisplay;\n\n    // console.log({ dateTimeDisplay, hour, newHour, min, sec });\n  };\n\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    variant: \"outlined\",\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      sx: {\n        maxWidth: '100vw'\n      },\n      \"aria-label\": \"simple table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: FIELDS.map((field, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: COL_HEADERS[index]\n          }, field, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: shiftsData.map(shift => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: FIELDS.map(field => {\n            const displayText = produceDisplayText(shift, field);\n            return /*#__PURE__*/_jsxDEV(TableCell, {\n              children: displayText\n            }, field + shift.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 40\n            }, this);\n          })\n        }, shift.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_c = ShiftsTable;\nvar _c;\n$RefreshReg$(_c, \"ShiftsTable\");","map":{"version":3,"names":["Paper","TableContainer","Table","TableHead","TableBody","TableRow","TableCell","ShiftsTable","shiftsData","nursesData","FIELDS","COL_HEADERS","TIME_FIELDS","produceDisplayText","shift","field","includes","parseDateTimeUtils","nurseId","nurse","find","nur","id","nurseString","first_name","last_name","qualification","parseDateTime","iso","removeFrontZero","str","length","date_time_split","split","date","time","date_split","year","month","day","dateString","time_split","slice","hour","min","sec","period","newHour","parseInt","toString","timeString","join","dateTimeDisplay","maxWidth","map","index","displayText"],"sources":["/Users/nsujela/Desktop/connectRN/shift-tracker/src/ShiftsTable.js"],"sourcesContent":["import { Paper, TableContainer, Table, TableHead, TableBody, TableRow, TableCell } from '@mui/material';\n\nexport const ShiftsTable = ({ shiftsData, nursesData }) => {\n    const FIELDS = [\"name\", \"start\", \"end\", \"qual_required\", \"nurse_id\"];\n    const COL_HEADERS = [\"Shift\", \"Start time\", \"End time\", \"Certification required\", \"Assigned nurse\"];\n    const TIME_FIELDS = [\"start\", \"end\"];\n\n    const produceDisplayText = (shift, field) => {\n\n        // Process datetime (i.e. start & end)\n        if (TIME_FIELDS.includes(field)) {\n            return parseDateTimeUtils(shift[field]);\n        }\n\n        // Process nurse ID\n        else if (field === 'nurse_id') {\n            const nurseId = shift[field];\n            if (!nurseId) {\n                return '';\n            }\n\n            const nurse = nursesData.find(nur => nur.id === nurseId);\n            const nurseString = nurse.first_name\n                + \" \"\n                + nurse.last_name\n                + \", \"\n                + nurse.qualification;\n\n            return nurseString;\n        }\n\n        // All other fields\n        return shift[field];\n    }\n\n    const parseDateTime = (iso) => {\n        const removeFrontZero = (str) => {\n            if (str.length === 2 && str[0] === '0') {\n                return str[1];\n            }\n        }\n\n        // Break up date and time 2021-08-01T09:00:00Z\n        const date_time_split = iso.split(\"T\");\n        var [date, time] = [date_time_split[0], date_time_split[1]];\n\n        // Convert YYYY-MM-DD -> MM/DD/YY\n        const date_split = date.split(\"-\");\n        var [year, month, day] = [date_split[0],\n        date_split[1],\n        date_split[2]];\n\n        const dateString = removeFrontZero(month)\n            + '/'\n            + removeFrontZero(day)\n            + '/'\n            + year;\n\n        // Convert time 13:00:00Z -> 1:00:00 AM\n        const time_split = time.slice(0, -1).split(':');\n        const [hour, min, sec] = [time_split[0],\n        time_split[1],\n        time_split[2]];\n\n        const period = (hour < 12)\n            ? 'AM'\n            : 'PM';\n\n        var newHour = parseInt(hour) > 12\n            ? parseInt(hour) - 12\n            : (parseInt(hour) === 0\n                ? 12\n                : parseInt(hour));\n\n        newHour = newHour.toString();\n\n        const timeString = [newHour, min, sec].join(\":\")\n            + \" \"\n            + period;\n\n        const dateTimeDisplay = dateString + \" \" + timeString;\n\n        return dateTimeDisplay;\n\n        // console.log({ dateTimeDisplay, hour, newHour, min, sec });\n    };\n\n    return (\n        <TableContainer\n            component={Paper}\n            variant=\"outlined\"\n        >\n            <Table sx={{ maxWidth: '100vw' }} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        {FIELDS.map((field, index) => (\n                            <TableCell key={field}>{COL_HEADERS[index]}</TableCell>\n                        ))}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {shiftsData.map((shift) => (\n                        <TableRow key={shift.id}>\n                            {FIELDS.map((field) => {\n                                const displayText = produceDisplayText(shift, field);\n                                return <TableCell key={field + shift.id}>{displayText}</TableCell>;\n                            })}\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n\n    );\n\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}