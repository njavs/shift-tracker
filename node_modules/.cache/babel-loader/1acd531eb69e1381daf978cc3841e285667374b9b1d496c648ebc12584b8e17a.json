{"ast":null,"code":"const FIELDS = [\"name\", \"start\", \"end\", \"qual_required\", \"nurse_id\"];\nconst COL_HEADERS = [\"Shift\", \"Start time\", \"End time\", \"Certification required\", \"Assigned nurse\"];\nconst TIME_FIELDS = [\"start\", \"end\"];\nexport const produceDisplayText = (shift, field) => {\n  // Process datetime (i.e. start & end)\n  if (TIME_FIELDS.includes(field)) {\n    return parseDateTimeUtils(shift[field]);\n  }\n\n  // Process nurse ID\n  else if (field === 'nurse_id') {\n    const nurseId = shift[field];\n    if (!nurseId) {\n      return '';\n    }\n    const nursesData = [];\n    const nurse = nursesData.find(nur => nur.id === nurseId);\n    const nurseString = nurse.first_name + \" \" + nurse.last_name + \", \" + nurse.qualification;\n    return nurseString;\n  }\n\n  // All other fields\n  return shift[field];\n};\nexport const parseDateTimeUtils = iso => {\n  const removeFrontZero = str => {\n    if (str.length === 2 && str[0] === '0') {\n      return str[1];\n    }\n  };\n\n  // Break up date and time 2021-08-01T09:00:00Z\n  const date_time_split = iso.split(\"T\");\n  var [date, time] = [date_time_split[0], date_time_split[1]];\n\n  // Convert YYYY-MM-DD -> MM/DD/YY\n  const date_split = date.split(\"-\");\n  var [year, month, day] = [date_split[0], date_split[1], date_split[2]];\n  const dateString = removeFrontZero(month) + '/' + removeFrontZero(day) + '/' + year;\n\n  // Convert time 13:00:00Z -> 1:00:00 AM\n  const time_split = time.slice(0, -1).split(':');\n  const [hour, min, sec] = [time_split[0], time_split[1], time_split[2]];\n  const period = hour < 12 ? 'AM' : 'PM';\n  var newHour = parseInt(hour) > 12 ? parseInt(hour) - 12 : parseInt(hour) === 0 ? 12 : parseInt(hour);\n  newHour = newHour.toString();\n  const timeString = [newHour, min, sec].join(\":\") + \" \" + period;\n  const dateTimeDisplay = dateString + \" \" + timeString;\n  return dateTimeDisplay;\n\n  // console.log({ dateTimeDisplay, hour, newHour, min, sec });\n};","map":{"version":3,"names":["FIELDS","COL_HEADERS","TIME_FIELDS","produceDisplayText","shift","field","includes","parseDateTimeUtils","nurseId","nursesData","nurse","find","nur","id","nurseString","first_name","last_name","qualification","iso","removeFrontZero","str","length","date_time_split","split","date","time","date_split","year","month","day","dateString","time_split","slice","hour","min","sec","period","newHour","parseInt","toString","timeString","join","dateTimeDisplay"],"sources":["/Users/nsujela/Desktop/connectRN/shift-tracker/src/utils.js"],"sourcesContent":["const FIELDS = [\"name\", \"start\", \"end\", \"qual_required\", \"nurse_id\"];\nconst COL_HEADERS = [\"Shift\", \"Start time\", \"End time\", \"Certification required\", \"Assigned nurse\"];\nconst TIME_FIELDS = [\"start\", \"end\"];\n\nexport const produceDisplayText = (shift, field) => {\n\n    // Process datetime (i.e. start & end)\n    if (TIME_FIELDS.includes(field)) {\n        return parseDateTimeUtils(shift[field]);\n    }\n\n    // Process nurse ID\n    else if (field === 'nurse_id') {\n        const nurseId = shift[field];\n        if (!nurseId) {\n            return '';\n        }\n\n        const nursesData = [];\n        const nurse = nursesData.find(nur => nur.id === nurseId);\n        const nurseString = nurse.first_name\n            + \" \"\n            + nurse.last_name\n            + \", \"\n            + nurse.qualification;\n\n        return nurseString;\n    }\n\n    // All other fields\n    return shift[field];\n};\n\nexport const parseDateTimeUtils = (iso) => {\n    const removeFrontZero = (str) => {\n        if (str.length === 2 && str[0] === '0') {\n            return str[1];\n        }\n    }\n\n    // Break up date and time 2021-08-01T09:00:00Z\n    const date_time_split = iso.split(\"T\");\n    var [date, time] = [date_time_split[0], date_time_split[1]];\n\n    // Convert YYYY-MM-DD -> MM/DD/YY\n    const date_split = date.split(\"-\");\n    var [year, month, day] = [date_split[0],\n    date_split[1],\n    date_split[2]];\n\n    const dateString = removeFrontZero(month)\n        + '/'\n        + removeFrontZero(day)\n        + '/'\n        + year;\n\n    // Convert time 13:00:00Z -> 1:00:00 AM\n    const time_split = time.slice(0, -1).split(':');\n    const [hour, min, sec] = [time_split[0],\n    time_split[1],\n    time_split[2]];\n\n    const period = (hour < 12)\n        ? 'AM'\n        : 'PM';\n\n    var newHour = parseInt(hour) > 12\n        ? parseInt(hour) - 12\n        : (parseInt(hour) === 0\n            ? 12\n            : parseInt(hour));\n\n    newHour = newHour.toString();\n\n    const timeString = [newHour, min, sec].join(\":\")\n        + \" \"\n        + period;\n\n    const dateTimeDisplay = dateString + \" \" + timeString;\n\n    return dateTimeDisplay;\n\n    // console.log({ dateTimeDisplay, hour, newHour, min, sec });\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}